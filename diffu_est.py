from net_diffusion import *
from net_est import *


def diffu_mod_est(n_sample=200):
    features, labels = diffu_fea_gen(n_samples=n_sample)

    # # shuffle the dataset
    # idx = np.random.permutation(len(labels))
    # y, X = labels[idx], features[idx]


    # peek ajm to test
    aj_test, sta_test = get_test()
    diffu_test = Indcsc(aj_test, state=sta_test)
    fea_test, _ = diffu_test.fea_gen()
    print(fea_test)

    # # visualize the feature distribution from different net_gens
    # visual_dat(labels, features, fea_test)

    # fea_test = fea_test.reshape([4,-1])
    if (fea_test.ndim == 1):
        fea_test = np.array([fea_test])
    # predict the generator of aj_matrix

    models, scores = train_clf(labels, features)

    generator = ['Independent cascade model', 'Proportional model']
    result = ensemble_predictions(models, fea_test)
    print(scores)
    print("The diffusion model to predict is generated by >>> %s !" %(generator[int(result)]))

    return


# diffu_mod_est(200)
def diffu_nod_fea_gen(n_samples=200 * 50):
    aj_test, sta_test = get_test()
    n = tot_num(aj_test)
    labels = []
    features = []
    for ii in range(n_samples):
        ix = ii % n
        v_ii = str(ix)

        rr = Proptn(aj_test, v_ii, alpha=0.3)
        rr.state_ite()
        fea_pro, _ = rr.fea_gen()
        features.append(fea_pro)
        labels.append(ix)

        del rr

    features = np.array(features)
    labels = np.array(labels)

    hf = h5py.File('dat/diffu_fea.dat', 'w')
    hf.create_dataset('features', data=features)
    hf.create_dataset('labels', data=labels)

    return features, labels


def diffu_nod_est(n_sample=200 * 50):
    # features, labels = diffu_nod_fea_gen(n_samples=n_sample)

    hf = h5py.File('dat/diffu_fea.dat', 'r')
    features = hf['features']
    labels = hf['labels']

    # # shuffle the dataset
    # idx = np.random.permutation(len(labels))
    # y, X = labels[idx], features[idx]


    # peek ajm to test
    aj_test, sta_test = get_test()
    diffu_test = Proptn(aj_test, state=sta_test)
    fea_test, _ = diffu_test.fea_gen()
    print(fea_test)

    # # visualize the feature distribution from different net_gens
    # visual_dat(labels, features, fea_test)

    # fea_test = fea_test.reshape([4,-1])
    if (fea_test.ndim == 1):
        fea_test = np.array([fea_test])
    # predict the generator of aj_matrix

    models, scores = train_clf(labels, features)

    generator = range(50)
    result = ensemble_predictions(models, fea_test)
    print(scores)
    print("The node starts the diffusion is predicted as >>> %d !" %(generator[int(result)]))

    return


def dif_nod_detector(mod='svm'):
    aj_test, sta_test = get_test()
    diffu_test = Proptn(aj_test, state=sta_test)
    fea_test, _ = diffu_test.fea_gen()
    if (fea_test.ndim == 1):
        fea_test = np.array([fea_test])

    # with h5py.File('dat/diffu_fea.dat', 'r') as f:
    hf = h5py.File('dat/diffu_fea.dat', 'r')
    features = hf['features']
    labels = hf['labels']
    features = np.array(features)
    labels = np.array(labels)
    get_indexes = lambda x, xs: [i for (y, i) in zip(xs, range(len(xs))) if x == y]
    get_a_indexes = lambda x, xs: [i for (y, i) in zip(xs, range(len(xs))) if x != y]

    def extend_arr(arr, arrs):
        arr = arr.tolist()
        arrs = arrs.tolist()
        for e in arr:
            arrs.append(e)

        arrs = np.array(arrs)
        return arrs

    ratio_list = []
    models_bank = []
    ratio_max = 0
    idx_ml = 0
    models_ml = []
    for ii in range(50):
        idx = get_indexes(ii, labels)
        aidx = get_a_indexes(ii, labels)
        aaix = np.random.choice(aidx, 200)
        # lab = labels[idx]
        # lab_e = extend_arr(labels[aaix], lab)
        #
        lab = np.ones(len(idx))
        lab_e = extend_arr(np.zeros(len(aaix)), lab)
        fea = features[idx]
        fea_e = extend_arr(features[aaix], fea)


        # print(lab_e)
        # print(fea_e.shape)
        print("binary clf for %d" %ii)
        models, scores = train_clf(lab_e, fea_e, opt=mod)
        score = np.mean(scores)
        if mod == 'svm':
            ensemble_pred = ensemble_predictions_nod_sk
        if mod == 'mlp':
            ensemble_pred = ensemble_predictions_nod
        result, ratio = ensemble_pred(models, fea_test)
        models_bank.append(models)
        ratio_list.append(ratio)

        ratio = score * ratio
        if ratio > ratio_max:
            ratio_max = ratio
            models_ml = models
            idx_ml = ii

    print(ratio_list)
    result, _ = ensemble_predictions_nod(models_ml, fea_test)


    if mod == 'mlp':
        generator = range(2)
        print("The node starts the diffusion is predicted as >>> %d !" % (generator[int(result)]))
        print("the node is %d" %idx_ml)
    if mod == 'svm':
        result = [str(res) for res in result]
        print("result is " + (','.join(result)))


# net_est()
# diffu_mod_est()
diffu_nod_fea_gen()
# diffu_nod_est()
dif_nod_detector(mod='mlp')
